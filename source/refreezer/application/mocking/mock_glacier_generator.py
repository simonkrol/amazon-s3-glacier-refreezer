"""
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
"""

import json
from typing import Any, Dict, Callable
from datetime import timedelta
from unittest.mock import patch
from moto import mock_glacier  # type: ignore
import requests  # type: ignore
from refreezer.application.mocking.mock_glacier_vault import MockGlacierVault

mock_vault_list = []


def mock_vault(func: Callable[[MockGlacierVault], Dict[str, Any]]) -> None:
    """Decorator to mark a function as a mock vault.

    When applied to a function, this decorator generates a mock Glacier vault with the same
    name as the function in a file named mock_glacier_data.py. This can be useful for testing
    code that interacts with the AWS Glacier service without actually making network requests.
    The decorator also seeds the moto API with a set value to ensure that UUIDs match on
    consecutive runs of the script, and mocks the datetime.timedelta function to return 0 to
    prevent an artificial sleep call in the moto initiate-job API.

    Args:
        func (Callable): The function to be decorated.

    Returns:
        Callable: The decorated function.

    Raises:
        TypeError: If the input argument is not a callable object.

    """

    def wrapper() -> Dict[str, Any]:
        with mock_glacier(), patch(
            "datetime.timedelta", return_value=timedelta(seconds=0)
        ):
            requests.post("http://motoapi.amazonaws.com/moto-api/seed?a=1")
            return func(MockGlacierVault(func.__name__))

    mock_vault_list.append(wrapper)


@mock_vault
def test_mock_glacier_apis_vault(vault: MockGlacierVault) -> Dict[str, Any]:
    archive_id = vault.upload_archive(body="TESTBODY", archive_description="test.txt")
    inventory_job_id = vault.initiate_job({"Type": "inventory-retrieval"})
    vault.get_job_output(inventory_job_id)

    archive_job_id = vault.initiate_job(
        {"Type": "archive-retrieval", "ArchiveId": archive_id}
    )
    vault.get_job_output(archive_job_id, range="bytes=0-2")
    vault.get_job_output(archive_job_id, range="bytes=3-5")
    vault.get_job_output(archive_job_id, range="bytes=6-8")
    return vault.mock_data()


@mock_vault
def test_vault_generation_vault(vault: MockGlacierVault) -> Dict[str, Any]:
    archive_id = vault.upload_archive(body="TESTBODY", archive_description="test.txt")
    archive_id_2 = vault.upload_archive(
        body="TESTBODY2", archive_description='my archive description,1"2'
    )
    inventory_job_id = vault.initiate_job({"Type": "inventory-retrieval"})
    vault.get_job_output(inventory_job_id)

    archive_job_id = vault.initiate_job(
        {"Type": "archive-retrieval", "ArchiveId": archive_id}
    )

    archive_2_job_id = vault.initiate_job(
        {"Type": "archive-retrieval", "ArchiveId": archive_id_2}
    )
    vault.get_job_output(archive_job_id, range="bytes=0-2")
    vault.get_job_output(archive_job_id, range="bytes=3-5")
    vault.get_job_output(archive_job_id, range="bytes=6-8")
    vault.get_job_output(archive_2_job_id)
    return vault.mock_data()


if __name__ == "__main__":
    mock_vault_dict: Dict[str, Any] = {}
    for mock_vault in mock_vault_list:  # type: ignore
        mock_vault_dict = mock_vault_dict | mock_vault()  # type: ignore
    with open("mock_glacier_data.py", "w") as f:
        f.write(
            '"""\nCopyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\nSPDX-License-Identifier: Apache-2.0\n"""\n'
        )
        f.write(
            "# This file is auto-generated by mock_glacier_generator.py and formatted with black\n"
        )
        f.write(f"MOCK_DATA = {json.dumps(mock_vault_dict, indent=4)}")
